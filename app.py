from flask import Flask, render_template, request, jsonify, g
import sqlite3
import requests

app = Flask(__name__)

DATABASE = 'my_database.db'

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def get_cpe_for_software(name, version):
    db = get_db()
    cursor = db.cursor()
    cursor.execute("SELECT cpe_identifier FROM software_info WHERE software_name=? AND cpe_identifier LIKE ?", 
                   (name, f'cpe:/%:{version}'))
    cpe_data = cursor.fetchone()

    if cpe_data:
        return cpe_data[0]
    else:
        return None

def get_cpe_from_nvd(name, version):
    url = f"https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml"
    response = requests.get(url)

    if response.status_code == 200:
        from xml.etree import ElementTree as ET
        root = ET.fromstring(response.content)
        for cpe in root.findall(".//{http://cpe.mitre.org/dictionary/2.0}cpe-item"):
            title = cpe.find("{http://cpe.mitre.org/dictionary/2.0}title").text
            if name.lower() in title.lower() and version in title:
                return cpe.find("{http://cpe.mitre.org/dictionary/2.0}name").text
    return None

def get_cve_for_cpe(cpe):
    url = f"https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString={cpe}"
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        return None

@app.route('/')
def index():
    input_count = 1
    return render_template('index.html', input_count=input_count)

@app.route('/check_software', methods=['POST'])
def check_software():
    input_count = int(request.form['inputCount'])
    results = []

    for i in range(input_count):
        software_name = request.form[f'softwareName_{i}']
        software_version = request.form[f'softwareVersion_{i}']

        cpe_identifier = get_cpe_for_software(software_name, software_version)

        if cpe_identifier:
            cve_data = get_cve_for_cpe(cpe_identifier)
        else:
            cve_data = None

        results.append({
            'software_name': software_name,
            'software_version': software_version,
            'cpe_identifier': cpe_identifier,
            'cve_data': cve_data
        })

    return render_template('results.html', results=results)

if __name__ == '__main__':
    app.run(debug=True)

